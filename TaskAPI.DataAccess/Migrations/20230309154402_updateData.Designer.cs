// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskAPI.DataAccess;

namespace TaskAPI.DataAccess.Migrations
{
    [DbContext(typeof(TodoDbContext))]
    [Migration("20230309154402_updateData")]
    partial class updateData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskAPI.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("JobRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressNo = "45",
                            City = "Colombo",
                            Fullname = "Nuwan",
                            JobRole = "Developer",
                            Street = "Street 1"
                        },
                        new
                        {
                            Id = 2,
                            AddressNo = "55",
                            City = "Kandy",
                            Fullname = "Kasun",
                            JobRole = "System Engineer",
                            Street = "Street 3"
                        },
                        new
                        {
                            Id = 3,
                            AddressNo = "65",
                            City = "Gampaha",
                            Fullname = "Kamal",
                            JobRole = "Developer",
                            Street = "Street 9"
                        },
                        new
                        {
                            Id = 4,
                            AddressNo = "75",
                            City = "Galla",
                            Fullname = "Nimal",
                            JobRole = "QA",
                            Street = "Street 7"
                        },
                        new
                        {
                            Id = 5,
                            AddressNo = "80",
                            City = "Trinco",
                            Fullname = "Amal",
                            JobRole = "QA",
                            Street = "Street 5"
                        });
                });

            modelBuilder.Entity("TaskAPI.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Created = new DateTime(2023, 3, 9, 21, 14, 1, 303, DateTimeKind.Local).AddTicks(4836),
                            Description = "Get Some text Books for school",
                            Due = new DateTime(2023, 3, 14, 21, 14, 1, 304, DateTimeKind.Local).AddTicks(6126),
                            Status = 1,
                            Title = "Get books for School from DB"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Created = new DateTime(2023, 3, 9, 21, 14, 1, 304, DateTimeKind.Local).AddTicks(7525),
                            Description = "Get Some text Books for school",
                            Due = new DateTime(2023, 3, 14, 21, 14, 1, 304, DateTimeKind.Local).AddTicks(7533),
                            Status = 1,
                            Title = "Get books for School from DB"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            Created = new DateTime(2023, 3, 9, 21, 14, 1, 304, DateTimeKind.Local).AddTicks(7546),
                            Description = "Get Some text Books for school",
                            Due = new DateTime(2023, 3, 14, 21, 14, 1, 304, DateTimeKind.Local).AddTicks(7548),
                            Status = 1,
                            Title = "Get books for School from DB"
                        });
                });

            modelBuilder.Entity("TaskAPI.Models.Todo", b =>
                {
                    b.HasOne("TaskAPI.Models.Author", "Author")
                        .WithMany("Todos")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TaskAPI.Models.Author", b =>
                {
                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
